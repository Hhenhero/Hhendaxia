结构体函数：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
struct stu
{
	char name[20];
	int age;
	char id[20];
};
int main()
{
	struct stu student={"zhangsan",10,"123456" };
	struct stu* ps = &student;
	printf("%s\n", student.name);
	printf("%d\n", (*ps).age);
	printf("%s\n", ps->id);
	return 0;
}

给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案：
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int arr[4] = { 2,7,11,15 };
int target;
printf("target=");
scanf("%d", &target);
int i = 0;
for (i = 0; i < 3; i++)
{
	int j = 0;
	for (j = i+1; j < 4; j++)
	{
		if (arr[i] + arr[j] == target)
		{
			printf("%d %d\n", i, j);
		}
	}
}
return 0;
}



BoBo写了一个十六进制整数ABCDEF，他问KiKi对应的十进制整数是多少：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{

    printf("%15d\n", 0XABCDEF);
    return 0;
}




KiKi写了一个输出“Hello world!”的程序，BoBo老师告诉他printf函数有返回值，你能帮他写个程序输出
printf(“Hello world!”)的返回值吗：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	printf("\n%d\n", printf("Hello world!"));
}



依次输入一个学生的学号，以及3科（C语言，数学，英语）成绩，在屏幕上输出该学生的学号，3科成
绩：#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int id;
	double mark1, mark2, mark3;
	scanf("%d;%lf,%lf,%lf", &id, &mark1, &mark2, &mark3);
	printf("The each subject score of No.%d is %.2f,%.2f,%.2f", id, mark1, mark2, mark3);
	return 0;
}


从键盘任意输入一个字符，编程判断是否是字母（包括大小写）：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	char i;
	while ((i = getchar()) != EOF)
	{
		if ((i < 'z' && i>'a') || (i < 'Z'&&i>'A'))
		{
			printf("yes\n");
		}
		else
		{
			printf("no\n");
		}
		getchar();
	}
	return 0;
}


输入一个字符，用它构造一个三角形金字塔。：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i;
	scanf("%d", &i);
	printf("     %d      \n", i);
	printf("   %d  %d      \n", i,i);
	printf(" %d  %d  %d    \n", i,i,i);
	printf(" %d %d  %d  %d      \n", i,i,i,i);
	return 0;
}
答案：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i,j,num,x;
	scanf("%d", &num);
	for (i = 1; i < 6; i++)
	{
		for (j = 6-i; j > 0; j--)
		{
			printf(" ");
		}
		for (x = i; x > 0; x--)
		{
			printf("%d ", num);
		}
		printf("\n");
	}
	return 0;
}


BoBo教KiKi字符常量或字符变量表示的字符在内存中以ASCII码形式存储。BoBo出了一个问题给KiKi，
转换以下ASCII码为对应字符并输出他们：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int arr[12] = { 73, 32, 99, 97, 110, 32, 100, 111, 32, 105, 116 , 33 };
	int i;
	for (i = 0; i < 12; i++)
	{
		printf("%c", arr[i]);
	}
	return 0;
}

输入一个人的出生日期（包括年月日），将该生日中的年、月、日分别输出：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int year, month, day;
	scanf("%4d", &year);
	scanf("%2d", &month);
	scanf("%2d", &day);
	printf("year=%d\nmonth=%02d\nday=%02d", year, month, day);
	return 0;
}

不使用累计乘法的基础上，通过移位运算（<<）实现2的n次方的计算：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int i,n;
	scanf("%d", &i);
		n = 2 << (i-1);
		printf("%d", n);
		return 0;
}

输入两个整数，范围-231~231-1，交换两个数并输出：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a, b;
	scanf("%d %d", &a, &b);
	if ((a<321 && a>-321) || (b<321 && b>-321))
	{
		a = a + b;
		b = a - b;
		a = a - b;
		printf("a=%d,b=%d", a, b);
	}
	return 0;
}

BoBo教KiKi字符常量或字符变量表示的字符在内存中以ASCII码形式存储。BoBo出了一个问题给KiKi，
输入一个字符，输出该字符相应的ASCII码：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	char ch;
	scanf("%c", &ch);
	printf("%d", ch);
	return 0;
}

请计算表达式“(-8+22)×a-10+c÷2”，其中，a = 40，c = 212。：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a = 40, c = 212;
	printf("%d", (-8 + 22)*a - 10 + c/2);
	return 0;
}

给定两个整数a和b (－10,000 < a,b < 10,000)，计算a除以b的整数商和余数。：
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
int main()
{
	int a, b;
	scanf("%d %d", &a, &b);
	if (a > -10000 && b < 10000)
	{
		printf("%d\n", a/b);
		printf("%d\n", a %b);
	}
	return 0;
}

